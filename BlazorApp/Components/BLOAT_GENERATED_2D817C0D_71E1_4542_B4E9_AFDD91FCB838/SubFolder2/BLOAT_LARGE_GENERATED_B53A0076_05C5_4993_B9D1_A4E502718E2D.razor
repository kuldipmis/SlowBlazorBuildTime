@using Telerik.Blazor.Components;
<button>
	This is a test button! 
</button>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
	</tr>
</table>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_281916a1_0e68_496a_bde1_a56b397ea836_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_a33c3782_3a4e_417f_9d9b_9d5f58163fb3_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _a33c3782_3a4e_417f_9d9b_9d5f58163fb3_buttonVisibilityTest = !_a33c3782_3a4e_417f_9d9b_9d5f58163fb3_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<div class="@(Get_6c217ecb_884f_4126_bf30_132840e72e44_Class())">
	<p>This div is a test!</p>
</div>
<div class="@(Get_c23913fa_70a5_46f1_9dc7_64a9e8ea0ea1_Class())">
	<p>This div is a test!</p>
</div>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _f3b410e2_875f_48d1_8f0f_9ebb1f5d21e8_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _f3b410e2_875f_48d1_8f0f_9ebb1f5d21e8_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
</TelerikTabStrip> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_4fa61dbc_0887_48a4_b12d_d7405dd5c727_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _a33c3782_3a4e_417f_9d9b_9d5f58163fb3_buttonVisibilityTest;
	private void _281916a1_0e68_496a_bde1_a56b397ea836_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_6c217ecb_884f_4126_bf30_132840e72e44_Class()
	{
		return "alert alert-info";
	}
	private string Get_c23913fa_70a5_46f1_9dc7_64a9e8ea0ea1_Class()
	{
		return "alert alert-info";
	}
	private string _f3b410e2_875f_48d1_8f0f_9ebb1f5d21e8_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _4fa61dbc_0887_48a4_b12d_d7405dd5c727_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
