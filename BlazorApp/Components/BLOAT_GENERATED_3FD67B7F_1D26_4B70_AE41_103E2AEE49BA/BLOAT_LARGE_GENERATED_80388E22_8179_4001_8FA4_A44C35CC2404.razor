@using Telerik.Blazor.Components;
<a href="#">
	@(GetAnchor_8d91a9f6_bdd7_4861_9004_a5951d1a0d92_Text())
</a>
<button>
	This is a test button! 
</button>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_67ff4cca_0e79_4a14_bfca_326b59eac5dd_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_a8198691_7e2a_4d4e_9320_325a89367764_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
@if (_e6c203f0_575b_4cfd_93c1_7fb137e83b20_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _e6c203f0_575b_4cfd_93c1_7fb137e83b20_buttonVisibilityTest = !_e6c203f0_575b_4cfd_93c1_7fb137e83b20_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
		<th>
			Test Header 4
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col4Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col4Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col4Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col3Row4
		</td>
		<td>
			Col4Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
		<td>
			Col3Row5
		</td>
		<td>
			Col4Row5
		</td>
	</tr>
</table>
@code { 
	private bool _e6c203f0_575b_4cfd_93c1_7fb137e83b20_buttonVisibilityTest;
	private string GetAnchor_8d91a9f6_bdd7_4861_9004_a5951d1a0d92_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _a8198691_7e2a_4d4e_9320_325a89367764_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _67ff4cca_0e79_4a14_bfca_326b59eac5dd_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
