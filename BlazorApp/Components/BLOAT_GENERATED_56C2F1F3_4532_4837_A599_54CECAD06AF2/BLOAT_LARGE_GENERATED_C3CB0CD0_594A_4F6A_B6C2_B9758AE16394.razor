@using Telerik.Blazor.Components;
<div class="@(Get_cd887c95_6afb_47b6_8213_857b510e585d_Class())">
	<p>This div is a test!</p>
</div>
<div class="@(Get_573eaa4f_6910_40af_8658_64139f9b29cd_Class())">
	<button>
		This is a test button! 
	</button>
</div>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _05adfd43_242b_4202_8390_d47fa9a7029e_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _05adfd43_242b_4202_8390_d47fa9a7029e_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _05adfd43_242b_4202_8390_d47fa9a7029e_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip3Data = _05adfd43_242b_4202_8390_d47fa9a7029e_GetTabStripData(); }
		@tabStrip3Data
	</TabStripTab> 
</TelerikTabStrip> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
	</tr>
</table>
<button>
	This is a test button! 
</button>
<button>
	<button>
		This is a test button! 
	</button>
</button>
@if (_52e69160_9baf_45d7_aa0b_0ad2f829fe9b_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _52e69160_9baf_45d7_aa0b_0ad2f829fe9b_buttonVisibilityTest = !_52e69160_9baf_45d7_aa0b_0ad2f829fe9b_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
@if (_65d3767f_6e1f_48a0_81b2_b68048dbc3cd_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _65d3767f_6e1f_48a0_81b2_b68048dbc3cd_buttonVisibilityTest = !_65d3767f_6e1f_48a0_81b2_b68048dbc3cd_buttonVisibilityTest"> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_65fb986a_c8df_4f9f_b37e_556b3ea30ab8_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_880ce6e3_4504_482f_8209_a513b38074c2_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	This is a test button! 
</button>
@if (_ca56076a_19bc_4119_8c4f_d2a396910f8d_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _ca56076a_19bc_4119_8c4f_d2a396910f8d_buttonVisibilityTest = !_ca56076a_19bc_4119_8c4f_d2a396910f8d_buttonVisibilityTest"> 
		<a href="#">
			@(GetAnchor_30f720cb_8332_4729_b268_7a9edccf816f_Text())
		</a>
	</TelerikButton> 
}
@code { 
	private bool _52e69160_9baf_45d7_aa0b_0ad2f829fe9b_buttonVisibilityTest;
	private bool _65d3767f_6e1f_48a0_81b2_b68048dbc3cd_buttonVisibilityTest;
	private bool _ca56076a_19bc_4119_8c4f_d2a396910f8d_buttonVisibilityTest;
	private string Get_cd887c95_6afb_47b6_8213_857b510e585d_Class()
	{
		return "alert alert-info";
	}
	private string Get_573eaa4f_6910_40af_8658_64139f9b29cd_Class()
	{
		return "alert alert-info";
	}
	private string _05adfd43_242b_4202_8390_d47fa9a7029e_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _65fb986a_c8df_4f9f_b37e_556b3ea30ab8_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _880ce6e3_4504_482f_8209_a513b38074c2_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_30f720cb_8332_4729_b268_7a9edccf816f_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
