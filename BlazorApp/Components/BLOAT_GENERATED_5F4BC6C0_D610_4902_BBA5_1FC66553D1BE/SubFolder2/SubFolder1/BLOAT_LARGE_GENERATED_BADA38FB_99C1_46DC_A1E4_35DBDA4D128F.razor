@using Telerik.Blazor.Components;
<a href="#">
	@(GetAnchor_5f561c0a_b88e_49be_80b5_7c56adf19edc_Text())
</a>
<button>
	This is a test button! 
</button>
<button>
	This is a test button! 
</button>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
	</tr>
</table>
<button>
	This is a test button! 
</button>
<div class="@(Get_1968a90f_7817_413f_919e_6f9323eb7509_Class())">
	<p>This div is a test!</p>
</div>
@if (_150c0055_7e35_4ca6_814f_927437432614_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _150c0055_7e35_4ca6_814f_927437432614_buttonVisibilityTest = !_150c0055_7e35_4ca6_814f_927437432614_buttonVisibilityTest"> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_cc4eda5d_83aa_44af_b3fd_d4bd17fc2108_GridOnRead"> 
			<GridColumns> 
				<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_54dfc0b7_e7d1_491a_b2a8_9183863b2bb5_GridOnRead"> 
					<GridColumns> 
						<GridColumn Field="Item1" Title="TestColumn1"/> 
						<GridColumn Field="Item2" Title="TestColumn2"/> 
					</GridColumns> 
				</TelerikGrid> 
			</GridColumns> 
		</TelerikGrid> 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_c83690cd_654d_41b5_9c9a_146539cc3d89_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _150c0055_7e35_4ca6_814f_927437432614_buttonVisibilityTest;
	private string GetAnchor_5f561c0a_b88e_49be_80b5_7c56adf19edc_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string Get_1968a90f_7817_413f_919e_6f9323eb7509_Class()
	{
		return "alert alert-info";
	}
	private void _54dfc0b7_e7d1_491a_b2a8_9183863b2bb5_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _cc4eda5d_83aa_44af_b3fd_d4bd17fc2108_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _c83690cd_654d_41b5_9c9a_146539cc3d89_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
