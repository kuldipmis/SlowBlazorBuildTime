@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_086ad598_f102_4a75_8b0d_716ef3b1c326_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	@if (_359d2e96_04b3_4b17_89e2_20de5ec33f83_buttonVisibilityTest) 
	{
		<TelerikButton OnClick="() => _359d2e96_04b3_4b17_89e2_20de5ec33f83_buttonVisibilityTest = !_359d2e96_04b3_4b17_89e2_20de5ec33f83_buttonVisibilityTest"> 
			This is a test button! 
		</TelerikButton> 
	}
</button>
<a href="#">
	@(GetAnchor_4e5f1c2e_8d6e_455c_a2bc_71d091883073_Text())
</a>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _02f1426d_8b96_4c96_ab7e_6e0bb0856f5e_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _02f1426d_8b96_4c96_ab7e_6e0bb0856f5e_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
</TelerikTabStrip> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_c1ff28de_e91f_4797_ae6d_cfab8dc809b9_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7e7a4803_cf96_4961_ad0b_62dcff2762f7_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _359d2e96_04b3_4b17_89e2_20de5ec33f83_buttonVisibilityTest;
	private void _086ad598_f102_4a75_8b0d_716ef3b1c326_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_4e5f1c2e_8d6e_455c_a2bc_71d091883073_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string _f1c2bc0f_a061_43cc_b622_922162590b1d_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private string _02f1426d_8b96_4c96_ab7e_6e0bb0856f5e_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _c1ff28de_e91f_4797_ae6d_cfab8dc809b9_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _7e7a4803_cf96_4961_ad0b_62dcff2762f7_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
