@using Telerik.Blazor.Components;
<div class="@(Get_d66113bb_8bdf_45ab_b2cc_ad952befbccd_Class())">
	<p>This div is a test!</p>
</div>
<button>
	This is a test button! 
</button>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_61e0f632_d954_49c4_9a97_055bc537f7f6_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_78989818_adba_4b9a_ae72_4f1380a10dd8_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _78989818_adba_4b9a_ae72_4f1380a10dd8_buttonVisibilityTest = !_78989818_adba_4b9a_ae72_4f1380a10dd8_buttonVisibilityTest"> 
		<button>
			@if (_fbc9f99b_6486_4fe1_bb57_922642b5fb68_buttonVisibilityTest) 
			{
				<TelerikButton OnClick="() => _fbc9f99b_6486_4fe1_bb57_922642b5fb68_buttonVisibilityTest = !_fbc9f99b_6486_4fe1_bb57_922642b5fb68_buttonVisibilityTest"> 
					<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_0707fe66_f9a4_4022_b75d_33f34720734d_GridOnRead"> 
						<GridColumns> 
							<GridColumn Field="Item1" Title="TestColumn1"/> 
							<GridColumn Field="Item2" Title="TestColumn2"/> 
						</GridColumns> 
					</TelerikGrid> 
				</TelerikButton> 
			}
		</button>
	</TelerikButton> 
}
<a href="#">
	@(GetAnchor_c8910bd5_db85_495a_a8b8_6f44fd740899_Text())
	<a href="#">
		@(GetAnchor_afbe8e78_c443_4036_8535_906533f9b370_Text())
	</a>
</a>
@code { 
	private bool _fbc9f99b_6486_4fe1_bb57_922642b5fb68_buttonVisibilityTest;
	private bool _78989818_adba_4b9a_ae72_4f1380a10dd8_buttonVisibilityTest;
	private string Get_d66113bb_8bdf_45ab_b2cc_ad952befbccd_Class()
	{
		return "alert alert-info";
	}
	private void _61e0f632_d954_49c4_9a97_055bc537f7f6_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _0707fe66_f9a4_4022_b75d_33f34720734d_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_afbe8e78_c443_4036_8535_906533f9b370_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_c8910bd5_db85_495a_a8b8_6f44fd740899_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
