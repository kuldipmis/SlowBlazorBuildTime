@using Telerik.Blazor.Components;
<button>
	This is a test button! 
</button>
@if (_71dc8f4e_8617_4332_a316_f2a4df2e3fb5_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _71dc8f4e_8617_4332_a316_f2a4df2e3fb5_buttonVisibilityTest = !_71dc8f4e_8617_4332_a316_f2a4df2e3fb5_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7dcf6a11_5719_468b_bed4_c0cb6c7f5cc5_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_02b89f7a_7c55_4cf9_abb5_7483d4d2feb0_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_5f27a2ec_83a9_4f33_8cf5_f42d8a64f2d4_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_f4981892_3bda_4433_8d45_621eb5bf7c51_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_de0e4cbf_5177_4d52_bd1b_e80eee095449_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_5b46edf9_1c7b_4f36_a73c_befd2b968fcf_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_b083e4a8_1d54_4de9_a871_20f80dd336d9_Text())
	<a href="#">
		@(GetAnchor_4d29578b_f645_4d1d_bf2b_0cf9796d8581_Text())
		<a href="#">
			@(GetAnchor_389a59d9_8596_4a12_8706_f9270f49197e_Text())
		</a>
	</a>
</a>
@code { 
	private bool _71dc8f4e_8617_4332_a316_f2a4df2e3fb5_buttonVisibilityTest;
	private void _7dcf6a11_5719_468b_bed4_c0cb6c7f5cc5_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_02b89f7a_7c55_4cf9_abb5_7483d4d2feb0_Class()
	{
		return "alert alert-info";
	}
	private void _5f27a2ec_83a9_4f33_8cf5_f42d8a64f2d4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _de0e4cbf_5177_4d52_bd1b_e80eee095449_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _f4981892_3bda_4433_8d45_621eb5bf7c51_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _5b46edf9_1c7b_4f36_a73c_befd2b968fcf_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_389a59d9_8596_4a12_8706_f9270f49197e_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_4d29578b_f645_4d1d_bf2b_0cf9796d8581_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_b083e4a8_1d54_4de9_a871_20f80dd336d9_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
