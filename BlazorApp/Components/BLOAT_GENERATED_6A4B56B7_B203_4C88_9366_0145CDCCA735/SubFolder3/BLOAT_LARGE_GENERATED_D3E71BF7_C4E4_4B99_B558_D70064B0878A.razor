@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_df9e102b_0c9e_4394_b311_9f142160907b_GridOnRead"> 
	<GridColumns> 
		<a href="#">
			@(GetAnchor_9382ee9d_c1e3_40cc_a76e_5170a39391eb_Text())
		</a>
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_f97bd0a4_1333_4c05_a237_0fb3beef909a_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_019008c2_2ae9_49ea_b8a1_c4fa51e48ad9_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_255daa00_0ca6_47d3_bc14_a64211dfd9b1_GridOnRead"> 
			<GridColumns> 
				<a href="#">
					@(GetAnchor_ea5bbcd9_c296_4c4c_bbbc_7cd169a2a7d4_Text())
				</a>
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_d435cd17_63ea_493b_b9cb_a69e66a9c452_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_1f4e6222_dd9c_41e1_b122_828ef2f7ce47_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_02510015_38bb_475e_9b04_39591bd1bbe3_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _02510015_38bb_475e_9b04_39591bd1bbe3_buttonVisibilityTest = !_02510015_38bb_475e_9b04_39591bd1bbe3_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<div class="@(Get_fcdcf409_3b7d_4c65_8047_bfe18ad0aca9_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7766504a_af36_44ce_a084_84dec6dd45c4_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7462ebf3_1758_46bd_b085_ab56e0b0ab51_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _02510015_38bb_475e_9b04_39591bd1bbe3_buttonVisibilityTest;
	private string GetAnchor_9382ee9d_c1e3_40cc_a76e_5170a39391eb_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _df9e102b_0c9e_4394_b311_9f142160907b_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_f97bd0a4_1333_4c05_a237_0fb3beef909a_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_ea5bbcd9_c296_4c4c_bbbc_7cd169a2a7d4_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _255daa00_0ca6_47d3_bc14_a64211dfd9b1_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _019008c2_2ae9_49ea_b8a1_c4fa51e48ad9_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_d435cd17_63ea_493b_b9cb_a69e66a9c452_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _1f4e6222_dd9c_41e1_b122_828ef2f7ce47_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_fcdcf409_3b7d_4c65_8047_bfe18ad0aca9_Class()
	{
		return "alert alert-info";
	}
	private void _7766504a_af36_44ce_a084_84dec6dd45c4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _7462ebf3_1758_46bd_b085_ab56e0b0ab51_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
