@using Telerik.Blazor.Components;
@if (_4ae7264f_e77c_4efd_8121_0a1301211978_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _4ae7264f_e77c_4efd_8121_0a1301211978_buttonVisibilityTest = !_4ae7264f_e77c_4efd_8121_0a1301211978_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _763499a1_e6ce_4e7e_a3a4_77dc80675542_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _763499a1_e6ce_4e7e_a3a4_77dc80675542_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _763499a1_e6ce_4e7e_a3a4_77dc80675542_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip3Data = _763499a1_e6ce_4e7e_a3a4_77dc80675542_GetTabStripData(); }
		@tabStrip3Data
	</TabStripTab> 
</TelerikTabStrip> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_48ac512f_6601_4d43_a6dc_67aa72724b69_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_d2dcd15c_36fe_4666_8e91_858f7259ab34_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_410edcea_bc97_4420_bbba_4684934b5d11_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_140231a8_fa16_40ff_a8ac_f9b931a82c45_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _4ae7264f_e77c_4efd_8121_0a1301211978_buttonVisibilityTest;
	private string _763499a1_e6ce_4e7e_a3a4_77dc80675542_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _48ac512f_6601_4d43_a6dc_67aa72724b69_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_d2dcd15c_36fe_4666_8e91_858f7259ab34_Class()
	{
		return "alert alert-info";
	}
	private void _140231a8_fa16_40ff_a8ac_f9b931a82c45_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _410edcea_bc97_4420_bbba_4684934b5d11_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
