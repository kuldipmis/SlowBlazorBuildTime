@using Telerik.Blazor.Components;
@if (_d6a725da_71ef_4c9c_8241_f3c0363074bc_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _d6a725da_71ef_4c9c_8241_f3c0363074bc_buttonVisibilityTest = !_d6a725da_71ef_4c9c_8241_f3c0363074bc_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_f658791e_5bf0_45f2_86d5_fec6ec26227f_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_8ab8c862_6a2b_464d_ac7b_e632784c90c6_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_7989de59_a777_4d4d_8e5d_9c876c2b9ef1_Class())">
	<p>This div is a test!</p>
</div>
<div class="@(Get_f34b8464_fd7a_4a14_a7cb_56d87138c29e_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_aee1fa4c_9a6f_407e_b087_3818c5b6a0ec_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_78b57004_a999_4ac0_b822_0e8d275b860f_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _d6a725da_71ef_4c9c_8241_f3c0363074bc_buttonVisibilityTest;
	private void _8ab8c862_6a2b_464d_ac7b_e632784c90c6_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _f658791e_5bf0_45f2_86d5_fec6ec26227f_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_7989de59_a777_4d4d_8e5d_9c876c2b9ef1_Class()
	{
		return "alert alert-info";
	}
	private string Get_f34b8464_fd7a_4a14_a7cb_56d87138c29e_Class()
	{
		return "alert alert-info";
	}
	private void _78b57004_a999_4ac0_b822_0e8d275b860f_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _aee1fa4c_9a6f_407e_b087_3818c5b6a0ec_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
