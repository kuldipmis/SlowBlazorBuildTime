@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_bb851660_e593_4b81_a5db_8038be85e021_GridOnRead"> 
	<GridColumns> 
		<table>
			<tr>
				<th>
					Test Header 1
				</th>
				<th>
					Test Header 2
				</th>
				<th>
					Test Header 3
				</th>
				<th>
					Test Header 4
				</th>
				<th>
					Test Header 5
				</th>
			</tr>
			<tr>
				<td>
					Col1Row1
				</td>
				<td>
					Col2Row1
				</td>
				<td>
					Col3Row1
				</td>
				<td>
					Col4Row1
				</td>
				<td>
					Col5Row1
				</td>
				<td>
					Col1Row2
				</td>
				<td>
					Col2Row2
				</td>
				<td>
					Col3Row2
				</td>
				<td>
					Col4Row2
				</td>
				<td>
					Col5Row2
				</td>
				<td>
					Col1Row3
				</td>
				<td>
					Col2Row3
				</td>
				<td>
					Col3Row3
				</td>
				<td>
					Col4Row3
				</td>
				<td>
					Col5Row3
				</td>
				<td>
					Col1Row4
				</td>
				<td>
					Col2Row4
				</td>
				<td>
					Col3Row4
				</td>
				<td>
					Col4Row4
				</td>
				<td>
					Col5Row4
				</td>
				<td>
					Col1Row5
				</td>
				<td>
					Col2Row5
				</td>
				<td>
					Col3Row5
				</td>
				<td>
					Col4Row5
				</td>
				<td>
					Col5Row5
				</td>
			</tr>
		</table>
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_d74ea7f4_372c_4060_a305_ce19d7f70081_Text())
</a>
<button>
	This is a test button! 
</button>
<div class="@(Get_29afbe02_1072_42f5_bef8_f1836a4a648c_Class())">
	@if (_5c33a7d4_7525_4b68_b586_b019d150e3c7_buttonVisibilityTest) 
	{
		<TelerikButton OnClick="() => _5c33a7d4_7525_4b68_b586_b019d150e3c7_buttonVisibilityTest = !_5c33a7d4_7525_4b68_b586_b019d150e3c7_buttonVisibilityTest"> 
			<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_0b8665cf_25d9_4dfb_9fce_a1764ff14e4f_GridOnRead"> 
				<GridColumns> 
					<a href="#">
						@(GetAnchor_4e1e7952_eb34_447e_b5bd_60f90c5fcc62_Text())
					</a>
				</GridColumns> 
			</TelerikGrid> 
		</TelerikButton> 
	}
</div>
<button>
	This is a test button! 
</button>
<div class="@(Get_7d40bf65_7ce6_4aae_bc80_326d5979ffdd_Class())">
	@if (_69141ba8_e448_4b46_b8a1_f7731270a04b_buttonVisibilityTest) 
	{
		<TelerikButton OnClick="() => _69141ba8_e448_4b46_b8a1_f7731270a04b_buttonVisibilityTest = !_69141ba8_e448_4b46_b8a1_f7731270a04b_buttonVisibilityTest"> 
			This is a test button! 
		</TelerikButton> 
	}
</div>
<a href="#">
	@(GetAnchor_4fb9608c_95ff_4b63_9e0e_451bd3b4b332_Text())
	@if (_b01409af_492f_4569_96b4_21b8ede0ac36_buttonVisibilityTest) 
	{
		<TelerikButton OnClick="() => _b01409af_492f_4569_96b4_21b8ede0ac36_buttonVisibilityTest = !_b01409af_492f_4569_96b4_21b8ede0ac36_buttonVisibilityTest"> 
			This is a test button! 
		</TelerikButton> 
	}
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_daeff138_2e69_490f_b9da_405e4dc2a549_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _5c33a7d4_7525_4b68_b586_b019d150e3c7_buttonVisibilityTest;
	private bool _69141ba8_e448_4b46_b8a1_f7731270a04b_buttonVisibilityTest;
	private bool _b01409af_492f_4569_96b4_21b8ede0ac36_buttonVisibilityTest;
	private void _bb851660_e593_4b81_a5db_8038be85e021_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_d74ea7f4_372c_4060_a305_ce19d7f70081_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_4e1e7952_eb34_447e_b5bd_60f90c5fcc62_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _0b8665cf_25d9_4dfb_9fce_a1764ff14e4f_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_29afbe02_1072_42f5_bef8_f1836a4a648c_Class()
	{
		return "alert alert-info";
	}
	private string Get_7d40bf65_7ce6_4aae_bc80_326d5979ffdd_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_4fb9608c_95ff_4b63_9e0e_451bd3b4b332_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _daeff138_2e69_490f_b9da_405e4dc2a549_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
