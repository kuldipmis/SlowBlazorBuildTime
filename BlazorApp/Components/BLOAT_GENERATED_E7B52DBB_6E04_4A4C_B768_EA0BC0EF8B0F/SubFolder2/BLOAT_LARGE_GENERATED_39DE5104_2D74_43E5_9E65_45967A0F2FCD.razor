@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_d4bcbf73_9e87_4046_a27e_5e8b5934bcd5_GridOnRead"> 
	<GridColumns> 
		@if (_66a0c139_f1ad_492f_9e55_8735f24b7d57_buttonVisibilityTest) 
		{
			<TelerikButton OnClick="() => _66a0c139_f1ad_492f_9e55_8735f24b7d57_buttonVisibilityTest = !_66a0c139_f1ad_492f_9e55_8735f24b7d57_buttonVisibilityTest"> 
				This is a test button! 
			</TelerikButton> 
		}
	</GridColumns> 
</TelerikGrid> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col1Row3
		</td>
	</tr>
</table>
<a href="#">
	@(GetAnchor_d1086910_8daf_4899_a620_a9df3e50db63_Text())
</a>
<div class="@(Get_3e8832ac_08e4_485c_8e84_f2524d2b7207_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_d81f3811_f45d_4348_aedc_74578bd3bd31_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_9e078e70_0e31_48b4_b795_b4ed121c16c4_GridOnRead"> 
	<GridColumns> 
		<table>
			<tr>
				<th>
					Test Header 1
				</th>
				<th>
					Test Header 2
				</th>
				<th>
					Test Header 3
				</th>
				<th>
					Test Header 4
				</th>
			</tr>
			<tr>
				<td>
					Col1Row1
				</td>
				<td>
					Col2Row1
				</td>
				<td>
					Col3Row1
				</td>
				<td>
					Col4Row1
				</td>
				<td>
					Col1Row2
				</td>
				<td>
					Col2Row2
				</td>
				<td>
					Col3Row2
				</td>
				<td>
					Col4Row2
				</td>
			</tr>
		</table>
	</GridColumns> 
</TelerikGrid> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
	</tr>
</table>
<button>
	<table>
		<tr>
			<th>
				Test Header 1
			</th>
			<th>
				Test Header 2
			</th>
		</tr>
		<tr>
			<td>
				Col1Row1
			</td>
			<td>
				Col2Row1
			</td>
			<td>
				Col1Row2
			</td>
			<td>
				Col2Row2
			</td>
			<td>
				Col1Row3
			</td>
			<td>
				Col2Row3
			</td>
			<td>
				Col1Row4
			</td>
			<td>
				Col2Row4
			</td>
			<td>
				Col1Row5
			</td>
			<td>
				Col2Row5
			</td>
		</tr>
	</table>
</button>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
	</tr>
</table>
<a href="#">
	@(GetAnchor_7984f296_6221_45f7_b0a6_4f5df6f1c706_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_80f8f8e1_6757_4eae_a921_f8aa17c2b402_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_07a7d5aa_329d_4ba5_a5b6_440121a6b16a_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _07a7d5aa_329d_4ba5_a5b6_440121a6b16a_buttonVisibilityTest = !_07a7d5aa_329d_4ba5_a5b6_440121a6b16a_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
@code { 
	private bool _66a0c139_f1ad_492f_9e55_8735f24b7d57_buttonVisibilityTest;
	private bool _07a7d5aa_329d_4ba5_a5b6_440121a6b16a_buttonVisibilityTest;
	private void _d4bcbf73_9e87_4046_a27e_5e8b5934bcd5_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_d1086910_8daf_4899_a620_a9df3e50db63_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string Get_3e8832ac_08e4_485c_8e84_f2524d2b7207_Class()
	{
		return "alert alert-info";
	}
	private void _d81f3811_f45d_4348_aedc_74578bd3bd31_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _9e078e70_0e31_48b4_b795_b4ed121c16c4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_7984f296_6221_45f7_b0a6_4f5df6f1c706_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _80f8f8e1_6757_4eae_a921_f8aa17c2b402_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
