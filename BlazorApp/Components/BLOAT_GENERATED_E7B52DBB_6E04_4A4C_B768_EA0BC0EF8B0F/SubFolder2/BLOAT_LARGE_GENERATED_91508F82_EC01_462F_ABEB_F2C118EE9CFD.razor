@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7807ea6c_941c_42d6_ac18_d414dfc4eb24_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_834d56ba_6de8_4341_92ea_0d36f8e1ce66_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_331fc095_92f8_4f62_a7c4_743a4e218fd8_Text())
</a>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
		<th>
			Test Header 4
		</th>
		<th>
			Test Header 5
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col4Row1
		</td>
		<td>
			Col5Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col4Row2
		</td>
		<td>
			Col5Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col4Row3
		</td>
		<td>
			Col5Row3
		</td>
	</tr>
</table>
<div class="@(Get_41262688_32bf_4c8a_9a12_994607a73ade_Class())">
	<p>This div is a test!</p>
</div>
<div class="@(Get_99af3895_7606_460a_b29f_c7a0d335f07e_Class())">
	<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_e58df71f_a9cb_4047_b49f_be3abc8c121e_GridOnRead"> 
		<GridColumns> 
			<GridColumn Field="Item1" Title="TestColumn1"/> 
			<GridColumn Field="Item2" Title="TestColumn2"/> 
		</GridColumns> 
	</TelerikGrid> 
</div>
<a href="#">
	@(GetAnchor_00ad3a3f_b5cf_4d24_8447_9dc6a48b97f4_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_66ec5035_8374_4d79_9c38_6debd1e8551a_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_5095a860_1092_4c4a_985f_46aad653da9e_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _5095a860_1092_4c4a_985f_46aad653da9e_buttonVisibilityTest = !_5095a860_1092_4c4a_985f_46aad653da9e_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_6cec5bf0_eaa5_4595_a9d1_5ac25997c1e4_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _5095a860_1092_4c4a_985f_46aad653da9e_buttonVisibilityTest;
	private void _834d56ba_6de8_4341_92ea_0d36f8e1ce66_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _7807ea6c_941c_42d6_ac18_d414dfc4eb24_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_331fc095_92f8_4f62_a7c4_743a4e218fd8_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string Get_41262688_32bf_4c8a_9a12_994607a73ade_Class()
	{
		return "alert alert-info";
	}
	private void _e58df71f_a9cb_4047_b49f_be3abc8c121e_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_99af3895_7606_460a_b29f_c7a0d335f07e_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_00ad3a3f_b5cf_4d24_8447_9dc6a48b97f4_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _66ec5035_8374_4d79_9c38_6debd1e8551a_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _6cec5bf0_eaa5_4595_a9d1_5ac25997c1e4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
