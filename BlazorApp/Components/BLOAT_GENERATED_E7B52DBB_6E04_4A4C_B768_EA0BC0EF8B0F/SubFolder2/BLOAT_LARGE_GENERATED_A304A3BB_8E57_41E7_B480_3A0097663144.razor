@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_67e401f3_4542_4808_9467_444d8452d921_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col3Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
		<td>
			Col3Row5
		</td>
	</tr>
</table>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col3Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
		<td>
			Col3Row5
		</td>
	</tr>
</table>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
	</tr>
</table>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _b8a460d9_52e6_49d6_85e8_7fd36d2c32c6_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
</TelerikTabStrip> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_e6a34156_9e3d_4aa9_8458_749e74a6bbcf_GridOnRead"> 
	<GridColumns> 
		@if (_d66f2665_bf3f_4855_98d1_4594c679f1cb_buttonVisibilityTest) 
		{
			<TelerikButton OnClick="() => _d66f2665_bf3f_4855_98d1_4594c679f1cb_buttonVisibilityTest = !_d66f2665_bf3f_4855_98d1_4594c679f1cb_buttonVisibilityTest"> 
				This is a test button! 
			</TelerikButton> 
		}
	</GridColumns> 
</TelerikGrid> 
@if (_8fc3610b_ad36_4658_8c0a_17a6a336d7cf_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _8fc3610b_ad36_4658_8c0a_17a6a336d7cf_buttonVisibilityTest = !_8fc3610b_ad36_4658_8c0a_17a6a336d7cf_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
@code { 
	private bool _d66f2665_bf3f_4855_98d1_4594c679f1cb_buttonVisibilityTest;
	private bool _8fc3610b_ad36_4658_8c0a_17a6a336d7cf_buttonVisibilityTest;
	private void _67e401f3_4542_4808_9467_444d8452d921_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _f66c2460_3d5f_4abd_8552_4f1a3009dd29_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _dd2f4a9b_1494_449d_94a3_2a19362e3ca1_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_f0f8bcab_d0fd_48c6_b94e_0ebb4af63476_Class()
	{
		return "alert alert-info";
	}
	private string _b8a460d9_52e6_49d6_85e8_7fd36d2c32c6_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _e6a34156_9e3d_4aa9_8458_749e74a6bbcf_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
