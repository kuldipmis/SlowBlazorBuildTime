@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_3d376330_051b_47a4_b8dd_0b5e866e8daf_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _d5834774_bac9_4613_b2bc_3202eb57a657_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
</TelerikTabStrip> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
	</tr>
</table>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_83c69580_71ed_4381_a211_6798ce6dd21c_GridOnRead"> 
	<GridColumns> 
		<button>
			This is a test button! 
		</button>
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_1272e215_5c53_475e_b362_1053b63925b4_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_7e041358_e103_4828_942e_fd56f6373740_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_2a5a3430_5d74_44f2_aa55_f627dfde3809_Text())
</a>
@if (_1bf5c970_987c_410b_ad09_d83d9f664a87_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _1bf5c970_987c_410b_ad09_d83d9f664a87_buttonVisibilityTest = !_1bf5c970_987c_410b_ad09_d83d9f664a87_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
@code { 
	private bool _1bf5c970_987c_410b_ad09_d83d9f664a87_buttonVisibilityTest;
	private void _3d376330_051b_47a4_b8dd_0b5e866e8daf_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string _d5834774_bac9_4613_b2bc_3202eb57a657_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _83c69580_71ed_4381_a211_6798ce6dd21c_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_1272e215_5c53_475e_b362_1053b63925b4_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _7e041358_e103_4828_942e_fd56f6373740_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_2a5a3430_5d74_44f2_aa55_f627dfde3809_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
