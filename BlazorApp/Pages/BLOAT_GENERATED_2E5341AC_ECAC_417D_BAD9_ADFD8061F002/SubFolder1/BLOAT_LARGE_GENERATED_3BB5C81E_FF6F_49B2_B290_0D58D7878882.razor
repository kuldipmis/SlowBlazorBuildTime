@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_29a9df54_a106_4ec7_a721_305bdd4c92c2_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_ac214919_7f8d_4a10_b7e4_0ee10caa73fe_Class())">
	<p>This div is a test!</p>
</div>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _2d4e4749_f722_4806_a08b_a9692c5d3026_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
</TelerikTabStrip> 
<div class="@(Get_d2d93f48_bd7b_4b4f_854e_f5df2abf4a47_Class())">
	<p>This div is a test!</p>
</div>
@if (_9769c325_c489_4b2f_a5fe_f9e1b55c328b_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _9769c325_c489_4b2f_a5fe_f9e1b55c328b_buttonVisibilityTest = !_9769c325_c489_4b2f_a5fe_f9e1b55c328b_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<button>
	This is a test button! 
</button>
<div class="@(Get_c7ae24ac_4970_426b_bb6c_d691587d8c66_Class())">
	<p>This div is a test!</p>
</div>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col1Row5
		</td>
	</tr>
</table>
<button>
	<a href="#">
		@(GetAnchor_9e333408_74d6_4883_a724_10444fd1200c_Text())
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_8d497395_7f74_4e4f_b7b6_87de997d8be5_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</a>
</button>
<button>
	This is a test button! 
</button>
@code { 
	private bool _9769c325_c489_4b2f_a5fe_f9e1b55c328b_buttonVisibilityTest;
	private void _29a9df54_a106_4ec7_a721_305bdd4c92c2_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_ac214919_7f8d_4a10_b7e4_0ee10caa73fe_Class()
	{
		return "alert alert-info";
	}
	private string _2d4e4749_f722_4806_a08b_a9692c5d3026_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private string Get_d2d93f48_bd7b_4b4f_854e_f5df2abf4a47_Class()
	{
		return "alert alert-info";
	}
	private string Get_c7ae24ac_4970_426b_bb6c_d691587d8c66_Class()
	{
		return "alert alert-info";
	}
	private void _8d497395_7f74_4e4f_b7b6_87de997d8be5_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_9e333408_74d6_4883_a724_10444fd1200c_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
