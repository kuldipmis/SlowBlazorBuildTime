@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_0024dc9f_3c43_4209_b054_32e50efcdd4c_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_81e6b5ec_a763_4289_95c4_36e6c36a4ec8_Text())
</a>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _df932346_9e3c_431a_8a75_5cfd454cde34_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _df932346_9e3c_431a_8a75_5cfd454cde34_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _df932346_9e3c_431a_8a75_5cfd454cde34_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip3Data = _df932346_9e3c_431a_8a75_5cfd454cde34_GetTabStripData(); }
		@tabStrip3Data
	</TabStripTab> 
</TelerikTabStrip> 
<div class="@(Get_64cccdeb_bed6_44b8_b051_6221f0bd7037_Class())">
	<p>This div is a test!</p>
</div>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
	</tr>
</table>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_6a216e07_87c6_4c4a_bf7a_c9de027bb743_GridOnRead"> 
	<GridColumns> 
		<a href="#">
			@(GetAnchor_ef692b79_9d50_42bf_b64d_23a39e9cedbd_Text())
		</a>
	</GridColumns> 
</TelerikGrid> 
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _4645d05e_6e37_41af_964d_86ce84a5244f_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _4645d05e_6e37_41af_964d_86ce84a5244f_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _4645d05e_6e37_41af_964d_86ce84a5244f_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip3Data = _4645d05e_6e37_41af_964d_86ce84a5244f_GetTabStripData(); }
		@tabStrip3Data
	</TabStripTab> 
</TelerikTabStrip> 
@code { 

	private void _0024dc9f_3c43_4209_b054_32e50efcdd4c_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_81e6b5ec_a763_4289_95c4_36e6c36a4ec8_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string _df932346_9e3c_431a_8a75_5cfd454cde34_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private string Get_64cccdeb_bed6_44b8_b051_6221f0bd7037_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_ef692b79_9d50_42bf_b64d_23a39e9cedbd_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _6a216e07_87c6_4c4a_bf7a_c9de027bb743_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string _4645d05e_6e37_41af_964d_86ce84a5244f_GetTabStripData()
	{
		return "Tab strip content!";
	}
} 
