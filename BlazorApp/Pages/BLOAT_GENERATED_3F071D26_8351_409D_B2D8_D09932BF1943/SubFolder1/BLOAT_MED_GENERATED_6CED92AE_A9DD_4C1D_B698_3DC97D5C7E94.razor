@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_f174f920_5a3b_4630_8abf_7a3297835b1c_GridOnRead"> 
	<GridColumns> 
		<a href="#">
			@(GetAnchor_6285ed80_09d8_49d3_a9b9_33cf89644cbb_Text())
			<TelerikTabStrip> 
				<TabStripTab> 
					@{ var tabStrip0Data = _25e7b796_b7bb_42a5_8cd9_e64afd9027bb_GetTabStripData(); }
					@tabStrip0Data
				</TabStripTab> 
			</TelerikTabStrip> 
		</a>
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_513e6ba3_4784_4d27_b011_32e9384d4f95_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_1e397b37_36b1_4912_9d12_7e40cd16eb79_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_9ad7db25_b2e6_4299_a1d1_e79f30c48a78_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_51a58fa3_b914_4a58_b2e4_87f8736408a1_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 

	private string _25e7b796_b7bb_42a5_8cd9_e64afd9027bb_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private string GetAnchor_6285ed80_09d8_49d3_a9b9_33cf89644cbb_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _f174f920_5a3b_4630_8abf_7a3297835b1c_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _513e6ba3_4784_4d27_b011_32e9384d4f95_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_1e397b37_36b1_4912_9d12_7e40cd16eb79_Class()
	{
		return "alert alert-info";
	}
	private void _9ad7db25_b2e6_4299_a1d1_e79f30c48a78_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _51a58fa3_b914_4a58_b2e4_87f8736408a1_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
