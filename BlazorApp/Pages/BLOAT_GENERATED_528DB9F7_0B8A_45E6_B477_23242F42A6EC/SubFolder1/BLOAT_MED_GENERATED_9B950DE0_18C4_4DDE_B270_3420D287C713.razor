@using Telerik.Blazor.Components;
@if (_51d9d894_3bb4_4922_9358_f6b73577d343_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _51d9d894_3bb4_4922_9358_f6b73577d343_buttonVisibilityTest = !_51d9d894_3bb4_4922_9358_f6b73577d343_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_c6d0c18f_7a84_48c8_8cac_0e51bf56a152_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_fdbd7679_db58_4b79_a279_c156aa154706_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
@if (_06ae020e_65b6_47fc_bacd_24ca72f1dfeb_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _06ae020e_65b6_47fc_bacd_24ca72f1dfeb_buttonVisibilityTest = !_06ae020e_65b6_47fc_bacd_24ca72f1dfeb_buttonVisibilityTest"> 
		<button>
			This is a test button! 
		</button>
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_d7cfc961_3eb8_432c_8094_5f5bfd7b22d4_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_4b00e83a_80f5_4980_b5f6_85cadac62766_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _51d9d894_3bb4_4922_9358_f6b73577d343_buttonVisibilityTest;
	private bool _06ae020e_65b6_47fc_bacd_24ca72f1dfeb_buttonVisibilityTest;
	private void _fdbd7679_db58_4b79_a279_c156aa154706_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _c6d0c18f_7a84_48c8_8cac_0e51bf56a152_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _d7cfc961_3eb8_432c_8094_5f5bfd7b22d4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _4b00e83a_80f5_4980_b5f6_85cadac62766_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
