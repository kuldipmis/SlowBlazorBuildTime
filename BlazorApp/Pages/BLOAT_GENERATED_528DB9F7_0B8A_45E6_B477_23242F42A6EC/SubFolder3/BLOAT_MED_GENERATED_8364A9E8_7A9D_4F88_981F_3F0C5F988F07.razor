@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_b7937b41_1bc7_425e_b5d5_ae2b9cb77b17_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_00ee94c4_3000_4cc6_8dae_d26f63a16c62_GridOnRead"> 
	<GridColumns> 
		@if (_66146d0f_ba7d_4639_a81a_e80344a26348_buttonVisibilityTest) 
		{
			<TelerikButton OnClick="() => _66146d0f_ba7d_4639_a81a_e80344a26348_buttonVisibilityTest = !_66146d0f_ba7d_4639_a81a_e80344a26348_buttonVisibilityTest"> 
				<button>
					This is a test button! 
				</button>
			</TelerikButton> 
		}
	</GridColumns> 
</TelerikGrid> 
@if (_85a6a6c3_158c_41d5_9098_3f868f176f6d_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _85a6a6c3_158c_41d5_9098_3f868f176f6d_buttonVisibilityTest = !_85a6a6c3_158c_41d5_9098_3f868f176f6d_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<div class="@(Get_db607f40_1a2e_43e9_94a5_8159be7e1318_Class())">
	<p>This div is a test!</p>
</div>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_cea08ae6_f211_43c7_87a6_a0fdb505d8ce_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_50e79dfa_1241_4a49_bdb4_2a1685e08d61_Text())
</a>
@code { 
	private bool _66146d0f_ba7d_4639_a81a_e80344a26348_buttonVisibilityTest;
	private bool _85a6a6c3_158c_41d5_9098_3f868f176f6d_buttonVisibilityTest;
	private void _b7937b41_1bc7_425e_b5d5_ae2b9cb77b17_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _00ee94c4_3000_4cc6_8dae_d26f63a16c62_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_db607f40_1a2e_43e9_94a5_8159be7e1318_Class()
	{
		return "alert alert-info";
	}
	private void _cea08ae6_f211_43c7_87a6_a0fdb505d8ce_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_50e79dfa_1241_4a49_bdb4_2a1685e08d61_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
