@using Telerik.Blazor.Components;
@if (_0b78458c_86e2_4e89_808c_f42336cd9d2b_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _0b78458c_86e2_4e89_808c_f42336cd9d2b_buttonVisibilityTest = !_0b78458c_86e2_4e89_808c_f42336cd9d2b_buttonVisibilityTest"> 
		<TelerikTabStrip> 
			<TabStripTab> 
				@{ var tabStrip0Data = _774bedca_30c9_4eed_8b9e_8ad723eb5df4_GetTabStripData(); }
				@tabStrip0Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip1Data = _774bedca_30c9_4eed_8b9e_8ad723eb5df4_GetTabStripData(); }
				@tabStrip1Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip2Data = _774bedca_30c9_4eed_8b9e_8ad723eb5df4_GetTabStripData(); }
				@tabStrip2Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip3Data = _774bedca_30c9_4eed_8b9e_8ad723eb5df4_GetTabStripData(); }
				@tabStrip3Data
			</TabStripTab> 
		</TelerikTabStrip> 
	</TelerikButton> 
}
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
	</tr>
</table>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_e2a1ba0e_162c_4e78_b6f6_b9d3f20beccd_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_1900e48e_ae9e_41b4_a8f1_530fc883669d_GridOnRead"> 
				<GridColumns> 
					@if (_1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest) 
					{
						<TelerikButton OnClick="() => _1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest = !_1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest"> 
							This is a test button! 
						</TelerikButton> 
					}
				</GridColumns> 
			</TelerikGrid> 
		</td>
		<td>
			<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_1900e48e_ae9e_41b4_a8f1_530fc883669d_GridOnRead"> 
				<GridColumns> 
					@if (_1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest) 
					{
						<TelerikButton OnClick="() => _1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest = !_1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest"> 
							This is a test button! 
						</TelerikButton> 
					}
				</GridColumns> 
			</TelerikGrid> 
		</td>
	</tr>
</table>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col1Row5
		</td>
	</tr>
</table>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_af02e105_1590_4563_b646_4f485b530aa4_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	This is a test button! 
</button>
<a href="#">
	@(GetAnchor_b9bb5d8e_94fc_4152_953a_a6eb84842c77_Text())
</a>
@if (_bebba57c_424a_4acf_8d1c_84016eb4ef0a_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _bebba57c_424a_4acf_8d1c_84016eb4ef0a_buttonVisibilityTest = !_bebba57c_424a_4acf_8d1c_84016eb4ef0a_buttonVisibilityTest"> 
		<div class="@(Get_dc920e06_b5a9_49de_9c74_bd78cb77f060_Class())">
			<p>This div is a test!</p>
		</div>
	</TelerikButton> 
}
@code { 
	private bool _0b78458c_86e2_4e89_808c_f42336cd9d2b_buttonVisibilityTest;
	private bool _1a3aded7_e8b5_4e53_b473_14ac92efa3d4_buttonVisibilityTest;
	private bool _bebba57c_424a_4acf_8d1c_84016eb4ef0a_buttonVisibilityTest;
	private string _774bedca_30c9_4eed_8b9e_8ad723eb5df4_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _e2a1ba0e_162c_4e78_b6f6_b9d3f20beccd_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _1900e48e_ae9e_41b4_a8f1_530fc883669d_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _af02e105_1590_4563_b646_4f485b530aa4_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_b9bb5d8e_94fc_4152_953a_a6eb84842c77_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string Get_dc920e06_b5a9_49de_9c74_bd78cb77f060_Class()
	{
		return "alert alert-info";
	}
} 
