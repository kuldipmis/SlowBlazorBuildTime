@using Telerik.Blazor.Components;
<a href="#">
	@(GetAnchor_7ad8870c_65de_4aed_9876_f5bbeee760ee_Text())
	<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_3592b7b7_0dc4_42ba_9693_403d1446aeb9_GridOnRead"> 
		<GridColumns> 
			<GridColumn Field="Item1" Title="TestColumn1"/> 
			<GridColumn Field="Item2" Title="TestColumn2"/> 
		</GridColumns> 
	</TelerikGrid> 
</a>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
	</tr>
</table>
@if (_69f1d36b_a124_471b_bc6a_0668078a157d_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _69f1d36b_a124_471b_bc6a_0668078a157d_buttonVisibilityTest = !_69f1d36b_a124_471b_bc6a_0668078a157d_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_12d0575a_3c19_49fd_9fdd_ae157c3dc541_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_5b514234_7b63_473b_b8af_c9dcc48e4d1f_Class())">
	<p>This div is a test!</p>
</div>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col1Row4
		</td>
		<td>
			Col2Row4
		</td>
		<td>
			Col3Row4
		</td>
		<td>
			Col1Row5
		</td>
		<td>
			Col2Row5
		</td>
		<td>
			Col3Row5
		</td>
	</tr>
</table>
<div class="@(Get_a951bb70_0373_4b2a_b5c4_c4ee860ecea2_Class())">
	<p>This div is a test!</p>
</div>
@if (_1f3dd0cf_fadc_4bfa_a16a_ec255002a575_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _1f3dd0cf_fadc_4bfa_a16a_ec255002a575_buttonVisibilityTest = !_1f3dd0cf_fadc_4bfa_a16a_ec255002a575_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<a href="#">
	@(GetAnchor_e9c55048_a714_4951_b59a_2fadeaaaf1fd_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_72099b20_93ea_42b1_9f6d_8927c2f5317c_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _69f1d36b_a124_471b_bc6a_0668078a157d_buttonVisibilityTest;
	private bool _1f3dd0cf_fadc_4bfa_a16a_ec255002a575_buttonVisibilityTest;
	private void _3592b7b7_0dc4_42ba_9693_403d1446aeb9_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_7ad8870c_65de_4aed_9876_f5bbeee760ee_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _12d0575a_3c19_49fd_9fdd_ae157c3dc541_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_5b514234_7b63_473b_b8af_c9dcc48e4d1f_Class()
	{
		return "alert alert-info";
	}
	private string Get_a951bb70_0373_4b2a_b5c4_c4ee860ecea2_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_e9c55048_a714_4951_b59a_2fadeaaaf1fd_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _72099b20_93ea_42b1_9f6d_8927c2f5317c_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
