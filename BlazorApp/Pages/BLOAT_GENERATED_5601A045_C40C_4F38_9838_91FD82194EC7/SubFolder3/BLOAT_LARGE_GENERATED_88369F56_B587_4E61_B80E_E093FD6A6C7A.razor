@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_f860310b_3617_4751_b2c9_c624f815f951_GridOnRead"> 
	<GridColumns> 
		<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_d5a00414_f376_46b4_9549_481d1c88abe0_GridOnRead"> 
			<GridColumns> 
				<GridColumn Field="Item1" Title="TestColumn1"/> 
				<GridColumn Field="Item2" Title="TestColumn2"/> 
			</GridColumns> 
		</TelerikGrid> 
	</GridColumns> 
</TelerikGrid> 
<div class="@(Get_8da3073c_1cb3_46f0_ad00_89ac70f16e0e_Class())">
	<table>
		<tr>
			<th>
				Test Header 1
			</th>
		</tr>
		<tr>
			<td>
				Col1Row1
			</td>
			<td>
				Col1Row2
			</td>
		</tr>
	</table>
</div>
<button>
	<a href="#">
		@(GetAnchor_2950a149_83e4_4f96_bbcb_c46f050ed79d_Text())
		@if (_5a2b7068_349d_4772_9477_d5a1a1b73781_buttonVisibilityTest) 
		{
			<TelerikButton OnClick="() => _5a2b7068_349d_4772_9477_d5a1a1b73781_buttonVisibilityTest = !_5a2b7068_349d_4772_9477_d5a1a1b73781_buttonVisibilityTest"> 
				This is a test button! 
			</TelerikButton> 
		}
	</a>
</button>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_e6906bd1_5f6e_4c1a_8456_0dc217188ce2_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	This is a test button! 
</button>
@code { 
	private bool _5a2b7068_349d_4772_9477_d5a1a1b73781_buttonVisibilityTest;
	private void _d5a00414_f376_46b4_9549_481d1c88abe0_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _f860310b_3617_4751_b2c9_c624f815f951_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_8da3073c_1cb3_46f0_ad00_89ac70f16e0e_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_2950a149_83e4_4f96_bbcb_c46f050ed79d_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _e6906bd1_5f6e_4c1a_8456_0dc217188ce2_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
