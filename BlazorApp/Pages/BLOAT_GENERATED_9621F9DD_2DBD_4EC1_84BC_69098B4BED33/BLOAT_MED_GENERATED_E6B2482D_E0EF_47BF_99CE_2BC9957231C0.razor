@using Telerik.Blazor.Components;
<a href="#">
	@(GetAnchor_4be306d9_56c5_456d_81bf_e228de9ace58_Text())
	<button>
		This is a test button! 
	</button>
</a>
@if (_d12cd4e1_a6da_4aaf_b825_b66d811edbc8_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _d12cd4e1_a6da_4aaf_b825_b66d811edbc8_buttonVisibilityTest = !_d12cd4e1_a6da_4aaf_b825_b66d811edbc8_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<table>
	<tr>
		<th>
			Test Header 1
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col1Row4
		</td>
	</tr>
</table>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _1b67d63f_a82f_46a1_a3cc_0eb2a666eee4_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _1b67d63f_a82f_46a1_a3cc_0eb2a666eee4_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _1b67d63f_a82f_46a1_a3cc_0eb2a666eee4_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip3Data = _1b67d63f_a82f_46a1_a3cc_0eb2a666eee4_GetTabStripData(); }
		@tabStrip3Data
	</TabStripTab> 
</TelerikTabStrip> 
<a href="#">
	@(GetAnchor_4bab4387_1505_4f52_92ad_549bb46d9283_Text())
	<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_4f40cfb8_cb4f_4baa_afd0_0b89a840da63_GridOnRead"> 
		<GridColumns> 
			<GridColumn Field="Item1" Title="TestColumn1"/> 
			<GridColumn Field="Item2" Title="TestColumn2"/> 
		</GridColumns> 
	</TelerikGrid> 
</a>
<div class="@(Get_23cac23a_3ca5_4147_895e_1c5edcfc4130_Class())">
	<p>This div is a test!</p>
</div>
@code { 
	private bool _d12cd4e1_a6da_4aaf_b825_b66d811edbc8_buttonVisibilityTest;
	private string GetAnchor_4be306d9_56c5_456d_81bf_e228de9ace58_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string _1b67d63f_a82f_46a1_a3cc_0eb2a666eee4_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _4f40cfb8_cb4f_4baa_afd0_0b89a840da63_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_4bab4387_1505_4f52_92ad_549bb46d9283_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string Get_23cac23a_3ca5_4147_895e_1c5edcfc4130_Class()
	{
		return "alert alert-info";
	}
} 
