@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_eccd2306_9a91_4567_98c1_f5c9a81c069b_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	This is a test button! 
</button>
<div class="@(Get_7d235d4f_d61c_4559_bae6_02d8b6d11da2_Class())">
	<p>This div is a test!</p>
</div>
<a href="#">
	@(GetAnchor_972b34fe_6f02_476d_81e5_17e3b7c20eb5_Text())
</a>
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _8a8b6a81_d850_4516_a781_a58ae7ba0764_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip1Data = _8a8b6a81_d850_4516_a781_a58ae7ba0764_GetTabStripData(); }
		@tabStrip1Data
	</TabStripTab> 
	<TabStripTab> 
		@{ var tabStrip2Data = _8a8b6a81_d850_4516_a781_a58ae7ba0764_GetTabStripData(); }
		@tabStrip2Data
	</TabStripTab> 
</TelerikTabStrip> 
@if (_a90c0385_7ea0_4442_9d2c_959f74420dca_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _a90c0385_7ea0_4442_9d2c_959f74420dca_buttonVisibilityTest = !_a90c0385_7ea0_4442_9d2c_959f74420dca_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikTabStrip> 
	<TabStripTab> 
		@{ var tabStrip0Data = _3409a7b2_4a11_4c01_9f97_eb7d1dad0762_GetTabStripData(); }
		@tabStrip0Data
	</TabStripTab> 
</TelerikTabStrip> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_080bce23_b8b1_4cb0_bd1f_c97507138785_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@code { 
	private bool _a90c0385_7ea0_4442_9d2c_959f74420dca_buttonVisibilityTest;
	private void _eccd2306_9a91_4567_98c1_f5c9a81c069b_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string Get_7d235d4f_d61c_4559_bae6_02d8b6d11da2_Class()
	{
		return "alert alert-info";
	}
	private string GetAnchor_972b34fe_6f02_476d_81e5_17e3b7c20eb5_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string _8a8b6a81_d850_4516_a781_a58ae7ba0764_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private string _3409a7b2_4a11_4c01_9f97_eb7d1dad0762_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _080bce23_b8b1_4cb0_bd1f_c97507138785_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
