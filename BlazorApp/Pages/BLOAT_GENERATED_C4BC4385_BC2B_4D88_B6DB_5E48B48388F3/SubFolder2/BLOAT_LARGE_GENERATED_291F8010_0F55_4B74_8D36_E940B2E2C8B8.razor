@using Telerik.Blazor.Components;
<a href="#">
	@(GetAnchor_43cb27b1_48af_4208_aa46_72a80fd2deca_Text())
</a>
<table>
	<tr>
		<th>
			Test Header 1
		</th>
		<th>
			Test Header 2
		</th>
		<th>
			Test Header 3
		</th>
		<th>
			Test Header 4
		</th>
		<th>
			Test Header 5
		</th>
	</tr>
	<tr>
		<td>
			Col1Row1
		</td>
		<td>
			Col2Row1
		</td>
		<td>
			Col3Row1
		</td>
		<td>
			Col4Row1
		</td>
		<td>
			Col5Row1
		</td>
		<td>
			Col1Row2
		</td>
		<td>
			Col2Row2
		</td>
		<td>
			Col3Row2
		</td>
		<td>
			Col4Row2
		</td>
		<td>
			Col5Row2
		</td>
		<td>
			Col1Row3
		</td>
		<td>
			Col2Row3
		</td>
		<td>
			Col3Row3
		</td>
		<td>
			Col4Row3
		</td>
		<td>
			Col5Row3
		</td>
	</tr>
</table>
<button>
	This is a test button! 
</button>
@if (_17fe99e3_5004_4b59_bace_ae23a036ce33_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _17fe99e3_5004_4b59_bace_ae23a036ce33_buttonVisibilityTest = !_17fe99e3_5004_4b59_bace_ae23a036ce33_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_2535fd90_6076_45b5_b306_2c4177d9c723_GridOnRead"> 
	<GridColumns> 
		<button>
			This is a test button! 
		</button>
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_aa4d59b9_b465_436a_9766_df3c0ea0e3eb_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_13d9b576_e644_4f08_bc6b_32bfa114092e_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _13d9b576_e644_4f08_bc6b_32bfa114092e_buttonVisibilityTest = !_13d9b576_e644_4f08_bc6b_32bfa114092e_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
@code { 
	private bool _17fe99e3_5004_4b59_bace_ae23a036ce33_buttonVisibilityTest;
	private bool _13d9b576_e644_4f08_bc6b_32bfa114092e_buttonVisibilityTest;
	private string GetAnchor_43cb27b1_48af_4208_aa46_72a80fd2deca_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _2535fd90_6076_45b5_b306_2c4177d9c723_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _aa4d59b9_b465_436a_9766_df3c0ea0e3eb_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
} 
