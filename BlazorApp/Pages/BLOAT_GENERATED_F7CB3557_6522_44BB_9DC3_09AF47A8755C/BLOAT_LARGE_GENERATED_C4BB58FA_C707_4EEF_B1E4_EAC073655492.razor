@using Telerik.Blazor.Components;
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_4d10e767_959f_43a7_9445_82e980774bbe_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
@if (_bbbab11f_538e_479e_8fe2_149e8194fbc8_buttonVisibilityTest) 
{
	<TelerikButton OnClick="() => _bbbab11f_538e_479e_8fe2_149e8194fbc8_buttonVisibilityTest = !_bbbab11f_538e_479e_8fe2_149e8194fbc8_buttonVisibilityTest"> 
		This is a test button! 
	</TelerikButton> 
}
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_3c011e29_494b_464c_ad38_2a1e72d9caa1_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_bad3761d_b867_420a_8874_ac6decda4fb9_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_56cd6bfd_74e1_4ee2_8a78_8a27c83462e7_GridOnRead"> 
	<GridColumns> 
		<TelerikTabStrip> 
			<TabStripTab> 
				@{ var tabStrip0Data = _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData(); }
				@tabStrip0Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip1Data = _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData(); }
				@tabStrip1Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip2Data = _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData(); }
				@tabStrip2Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip3Data = _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData(); }
				@tabStrip3Data
			</TabStripTab> 
			<TabStripTab> 
				@{ var tabStrip4Data = _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData(); }
				@tabStrip4Data
			</TabStripTab> 
		</TelerikTabStrip> 
	</GridColumns> 
</TelerikGrid> 
<a href="#">
	@(GetAnchor_e3fb2019_d58c_4c3e_a177_c9f633d21f0a_Text())
</a>
<a href="#">
	@(GetAnchor_e7e52d11_4a24_4210_ae6e_4baa3489bccd_Text())
</a>
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_0ef587d9_c41b_41a3_8989_9778d6e1aa08_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<TelerikGrid Pageable="@true" Sortable="@true" TItem="Tuple<string, string>" OnRead="@_f7a20709_eaea_4121_b287_89d08b45b3e8_GridOnRead"> 
	<GridColumns> 
		<GridColumn Field="Item1" Title="TestColumn1"/> 
		<GridColumn Field="Item2" Title="TestColumn2"/> 
	</GridColumns> 
</TelerikGrid> 
<button>
	<button>
		This is a test button! 
	</button>
</button>
<a href="#">
	@(GetAnchor_0c0c7b6b_4df1_4a90_abf0_106e94c19d95_Text())
</a>
<button>
	This is a test button! 
</button>
@code { 
	private bool _bbbab11f_538e_479e_8fe2_149e8194fbc8_buttonVisibilityTest;
	private void _4d10e767_959f_43a7_9445_82e980774bbe_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _3c011e29_494b_464c_ad38_2a1e72d9caa1_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_bad3761d_b867_420a_8874_ac6decda4fb9_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string _560e9c04_d93b_45b9_a48c_ee3b66b23d25_GetTabStripData()
	{
		return "Tab strip content!";
	}
	private void _56cd6bfd_74e1_4ee2_8a78_8a27c83462e7_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_e3fb2019_d58c_4c3e_a177_c9f633d21f0a_Text()
	{
		return "This Anchor element is a Test!";
	}
	private string GetAnchor_e7e52d11_4a24_4210_ae6e_4baa3489bccd_Text()
	{
		return "This Anchor element is a Test!";
	}
	private void _0ef587d9_c41b_41a3_8989_9778d6e1aa08_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private void _f7a20709_eaea_4121_b287_89d08b45b3e8_GridOnRead(GridReadEventArgs args)
	{
		List<Tuple<string, string>> data = new()
		{
			new Tuple<string, string>("TestVal1", "TestVal2"),
			new Tuple<string, string>("TestVal3", "TestVal4"),
			new Tuple<string, string>("TestVal5", "TestVal6"),
			new Tuple<string, string>("TestVal7", "TestVal8")
		};
		args.Data = data;
		args.Total = data.Count;
	}
	private string GetAnchor_0c0c7b6b_4df1_4a90_abf0_106e94c19d95_Text()
	{
		return "This Anchor element is a Test!";
	}
} 
